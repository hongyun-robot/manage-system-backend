// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: classify/classify.proto

//cd .\config\rpc\classify\
//goctl rpc protoc classify.proto --go_out=..\..\..\rpc\classify --go-grpc_out=..\..\..\rpc\classify  --zrpc_out=..\..\..\rpc\classify

package classify_client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Classify_AddClassify_FullMethodName    = "/classify_client.Classify/AddClassify"
	Classify_GetClassify_FullMethodName    = "/classify_client.Classify/GetClassify"
	Classify_GetAllClassify_FullMethodName = "/classify_client.Classify/GetAllClassify"
	Classify_UpdateClassify_FullMethodName = "/classify_client.Classify/UpdateClassify"
	Classify_DeleteClassify_FullMethodName = "/classify_client.Classify/DeleteClassify"
)

// ClassifyClient is the client API for Classify service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClassifyClient interface {
	AddClassify(ctx context.Context, in *AddClassifyRequest, opts ...grpc.CallOption) (*ClassifyList, error)
	GetClassify(ctx context.Context, in *GetClassifyRequest, opts ...grpc.CallOption) (*ClassifyList, error)
	GetAllClassify(ctx context.Context, in *GetAllClassifyRequest, opts ...grpc.CallOption) (*ClassifyList, error)
	UpdateClassify(ctx context.Context, in *UpdateClassifyRequest, opts ...grpc.CallOption) (*ClassifyList, error)
	DeleteClassify(ctx context.Context, in *DeleteClassifyRequest, opts ...grpc.CallOption) (*ClassifyList, error)
}

type classifyClient struct {
	cc grpc.ClientConnInterface
}

func NewClassifyClient(cc grpc.ClientConnInterface) ClassifyClient {
	return &classifyClient{cc}
}

func (c *classifyClient) AddClassify(ctx context.Context, in *AddClassifyRequest, opts ...grpc.CallOption) (*ClassifyList, error) {
	out := new(ClassifyList)
	err := c.cc.Invoke(ctx, Classify_AddClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classifyClient) GetClassify(ctx context.Context, in *GetClassifyRequest, opts ...grpc.CallOption) (*ClassifyList, error) {
	out := new(ClassifyList)
	err := c.cc.Invoke(ctx, Classify_GetClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classifyClient) GetAllClassify(ctx context.Context, in *GetAllClassifyRequest, opts ...grpc.CallOption) (*ClassifyList, error) {
	out := new(ClassifyList)
	err := c.cc.Invoke(ctx, Classify_GetAllClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classifyClient) UpdateClassify(ctx context.Context, in *UpdateClassifyRequest, opts ...grpc.CallOption) (*ClassifyList, error) {
	out := new(ClassifyList)
	err := c.cc.Invoke(ctx, Classify_UpdateClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classifyClient) DeleteClassify(ctx context.Context, in *DeleteClassifyRequest, opts ...grpc.CallOption) (*ClassifyList, error) {
	out := new(ClassifyList)
	err := c.cc.Invoke(ctx, Classify_DeleteClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClassifyServer is the server API for Classify service.
// All implementations must embed UnimplementedClassifyServer
// for forward compatibility
type ClassifyServer interface {
	AddClassify(context.Context, *AddClassifyRequest) (*ClassifyList, error)
	GetClassify(context.Context, *GetClassifyRequest) (*ClassifyList, error)
	GetAllClassify(context.Context, *GetAllClassifyRequest) (*ClassifyList, error)
	UpdateClassify(context.Context, *UpdateClassifyRequest) (*ClassifyList, error)
	DeleteClassify(context.Context, *DeleteClassifyRequest) (*ClassifyList, error)
	mustEmbedUnimplementedClassifyServer()
}

// UnimplementedClassifyServer must be embedded to have forward compatible implementations.
type UnimplementedClassifyServer struct {
}

func (UnimplementedClassifyServer) AddClassify(context.Context, *AddClassifyRequest) (*ClassifyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddClassify not implemented")
}
func (UnimplementedClassifyServer) GetClassify(context.Context, *GetClassifyRequest) (*ClassifyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClassify not implemented")
}
func (UnimplementedClassifyServer) GetAllClassify(context.Context, *GetAllClassifyRequest) (*ClassifyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllClassify not implemented")
}
func (UnimplementedClassifyServer) UpdateClassify(context.Context, *UpdateClassifyRequest) (*ClassifyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClassify not implemented")
}
func (UnimplementedClassifyServer) DeleteClassify(context.Context, *DeleteClassifyRequest) (*ClassifyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClassify not implemented")
}
func (UnimplementedClassifyServer) mustEmbedUnimplementedClassifyServer() {}

// UnsafeClassifyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClassifyServer will
// result in compilation errors.
type UnsafeClassifyServer interface {
	mustEmbedUnimplementedClassifyServer()
}

func RegisterClassifyServer(s grpc.ServiceRegistrar, srv ClassifyServer) {
	s.RegisterService(&Classify_ServiceDesc, srv)
}

func _Classify_AddClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassifyServer).AddClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Classify_AddClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassifyServer).AddClassify(ctx, req.(*AddClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Classify_GetClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassifyServer).GetClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Classify_GetClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassifyServer).GetClassify(ctx, req.(*GetClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Classify_GetAllClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassifyServer).GetAllClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Classify_GetAllClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassifyServer).GetAllClassify(ctx, req.(*GetAllClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Classify_UpdateClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassifyServer).UpdateClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Classify_UpdateClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassifyServer).UpdateClassify(ctx, req.(*UpdateClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Classify_DeleteClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassifyServer).DeleteClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Classify_DeleteClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassifyServer).DeleteClassify(ctx, req.(*DeleteClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Classify_ServiceDesc is the grpc.ServiceDesc for Classify service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Classify_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "classify_client.Classify",
	HandlerType: (*ClassifyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddClassify",
			Handler:    _Classify_AddClassify_Handler,
		},
		{
			MethodName: "GetClassify",
			Handler:    _Classify_GetClassify_Handler,
		},
		{
			MethodName: "GetAllClassify",
			Handler:    _Classify_GetAllClassify_Handler,
		},
		{
			MethodName: "UpdateClassify",
			Handler:    _Classify_UpdateClassify_Handler,
		},
		{
			MethodName: "DeleteClassify",
			Handler:    _Classify_DeleteClassify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "classify/classify.proto",
}
